name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password123
          MONGO_INITDB_DATABASE: universal_data
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          node-app/package-lock.json
          frontend/package-lock.json
    
    - name: Install Backend Dependencies
      run: |
        cd node-app
        npm ci
    
    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run Backend Tests
      run: |
        cd node-app
        npm test
      env:
        MONGODB_URI: mongodb://admin:password123@localhost:27017/universal_data?authSource=admin
        NODE_ENV: test
    
    - name: Run Frontend Tests
      run: |
        cd frontend
        npm test
    
    - name: Run Linting
      run: |
        cd node-app
        npm run lint || true
        cd ../frontend
        npm run lint || true
    
    - name: Security Audit
      run: |
        cd node-app
        npm audit --audit-level moderate
        cd ../frontend
        npm audit --audit-level moderate

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Backend Image
      run: |
        cd node-app
        docker build -t universal-data-stack-api:latest .
    
    - name: Build Frontend Image
      run: |
        cd frontend
        docker build -t universal-data-stack-frontend:latest .
    
    - name: Test Docker Compose
      run: |
        docker compose up -d --build
        sleep 30
        docker compose ps
        docker compose logs
        docker compose down

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Production
      run: |
        echo "Deployment would happen here"
        # Add your deployment logic here