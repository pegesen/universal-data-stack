name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: '1.0.0'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: universal-data-stack

jobs:
  # Create Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      changelog: ${{ steps.get-changelog.outputs.changelog }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: get-version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Generate changelog
      id: get-changelog
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --max-count=20)
        fi
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get-version.outputs.version }}
        release_name: Release ${{ steps.get-version.outputs.version }}
        body: |
          ## Changes in this Release
          ${{ steps.get-changelog.outputs.changelog }}
          
          ## Docker Images
          - `${{ env.REGISTRY }}/${{ github.repository }}/api-gateway:${{ steps.get-version.outputs.version }}`
          - `${{ env.REGISTRY }}/${{ github.repository }}/auth-service:${{ steps.get-version.outputs.version }}`
          - `${{ env.REGISTRY }}/${{ github.repository }}/data-service:${{ steps.get-version.outputs.version }}`
          - `${{ env.REGISTRY }}/${{ github.repository }}/search-service:${{ steps.get-version.outputs.version }}`
          - `${{ env.REGISTRY }}/${{ github.repository }}/notification-service:${{ steps.get-version.outputs.version }}`
          - `${{ env.REGISTRY }}/${{ github.repository }}/analytics-service:${{ steps.get-version.outputs.version }}`
          - `${{ env.REGISTRY }}/${{ github.repository }}/event-bus:${{ steps.get-version.outputs.version }}`
        draft: false
        prerelease: false

  # Build and Push Release Images
  build-release:
    name: Build Release Images
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        service: [api-gateway, auth-service, data-service, search-service, notification-service, analytics-service, event-bus]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./microservices/${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Update Helm Charts
  update-helm-charts:
    name: Update Helm Charts
    runs-on: ubuntu-latest
    needs: [create-release, build-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update Chart.yaml
      run: |
        # Update version in Chart.yaml
        sed -i "s/version: .*/version: ${{ needs.create-release.outputs.version }}/" k8s/helm-charts/universal-data-stack/Chart.yaml
        sed -i "s/appVersion: .*/appVersion: \"${{ needs.create-release.outputs.version }}\"/" k8s/helm-charts/universal-data-stack/Chart.yaml

    - name: Update values.yaml
      run: |
        # Update image tags in values.yaml
        sed -i "s/tag: .*/tag: ${{ needs.create-release.outputs.version }}/" k8s/helm-charts/universal-data-stack/values.yaml

    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add k8s/helm-charts/universal-data-stack/Chart.yaml k8s/helm-charts/universal-data-stack/values.yaml
        git commit -m "Update Helm charts for release ${{ needs.create-release.outputs.version }}" || exit 0
        git push

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [create-release, build-release, update-helm-charts]
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Deploy to production
      run: |
        helm upgrade --install universal-data-stack ./k8s/helm-charts/universal-data-stack \
          --namespace production \
          --create-namespace \
          --set image.tag=${{ needs.create-release.outputs.version }} \
          --set image.registry=${{ env.REGISTRY }} \
          --set ingress.hosts[0].host=api.universaldata.local \
          --values ./k8s/helm-charts/universal-data-stack/values-production.yaml

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/universal-data-stack-api-gateway -n production --timeout=600s

    - name: Run health checks
      run: |
        kubectl get pods -n production
        kubectl get services -n production
        
        # Wait for services to be ready
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=universal-data-stack -n production --timeout=300s

    - name: Run smoke tests
      run: |
        # Get service URL
        SERVICE_URL=$(kubectl get service universal-data-stack-api-gateway -n production -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Run smoke tests
        curl -f http://$SERVICE_URL/health || exit 1
        curl -f http://$SERVICE_URL/api/health || exit 1

  # Notify Teams
  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [create-release, deploy-production]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Release ${{ needs.create-release.outputs.version }} has been deployed to production!
          
          Changes:
          ${{ needs.create-release.outputs.changelog }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Teams
      uses: skitionek/notify-microsoft-teams@master
      with:
        webhook_url: ${{ secrets.TEAMS_WEBHOOK_URL }}
        status: ${{ job.status }}
        title: "Release ${{ needs.create-release.outputs.version }} Deployed"
        summary: |
          Release ${{ needs.create-release.outputs.version }} has been successfully deployed to production.
          
          Changes:
          ${{ needs.create-release.outputs.changelog }}

  # Create GitHub Pages Documentation
  create-docs:
    name: Create Documentation
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    - name: Install dependencies
      run: |
        npm install -g @compodoc/compodoc
        npm install -g typedoc

    - name: Generate API documentation
      run: |
        # Generate documentation for each service
        find microservices -name "package.json" -not -path "*/node_modules/*" | while read file; do
          dir=$(dirname "$file")
          service=$(basename "$dir")
          echo "Generating docs for $service"
          
          if [ -d "$dir/src" ]; then
            typedoc --out docs/$service --entryPointStrategy expand $dir/src || true
          fi
        done

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        cname: docs.universaldata.local