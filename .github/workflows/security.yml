name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM

jobs:
  # Dependency Scan
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: |
        find . -name "package.json" -not -path "./node_modules/*" | while read file; do
          dir=$(dirname "$file")
          echo "Installing dependencies in $dir"
          cd "$dir"
          npm ci
          cd - > /dev/null
        done

    - name: Run npm audit
      run: |
        find . -name "package.json" -not -path "./node_modules/*" | while read file; do
          dir=$(dirname "$file")
          echo "Auditing $dir"
          cd "$dir"
          npm audit --audit-level=moderate --json > audit-results.json || true
          cd - > /dev/null
        done

    - name: Upload audit results
      uses: actions/upload-artifact@v3
      with:
        name: npm-audit-results
        path: "**/audit-results.json"

  # Container Security Scan
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [api-gateway, auth-service, data-service, search-service, notification-service, analytics-service, event-bus]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        cd microservices/${{ matrix.service }}
        docker build -t ${{ matrix.service }}:latest .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ matrix.service }}:latest'
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  # SAST (Static Application Security Testing)
  sast:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, typescript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Infrastructure Security Scan
  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: k8s/
        framework: kubernetes
        output_format: sarif
        output_file_path: checkov-results.sarif

    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: checkov-results.sarif

  # License Compliance
  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install license-checker
      run: npm install -g license-checker

    - name: Check licenses
      run: |
        find . -name "package.json" -not -path "./node_modules/*" | while read file; do
          dir=$(dirname "$file")
          echo "Checking licenses in $dir"
          cd "$dir"
          license-checker --json > license-results.json || true
          cd - > /dev/null
        done

    - name: Upload license results
      uses: actions/upload-artifact@v3
      with:
        name: license-results
        path: "**/license-results.json"

  # Secret Scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  # Security Headers Test
  security-headers:
    name: Security Headers Test
    runs-on: ubuntu-latest
    needs: deploy-staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test security headers
      run: |
        # Get staging URL
        STAGING_URL="https://staging-api.universaldata.local"
        
        # Test security headers
        curl -I "$STAGING_URL" | grep -i "x-frame-options" || echo "Missing X-Frame-Options"
        curl -I "$STAGING_URL" | grep -i "x-content-type-options" || echo "Missing X-Content-Type-Options"
        curl -I "$STAGING_URL" | grep -i "x-xss-protection" || echo "Missing X-XSS-Protection"
        curl -I "$STAGING_URL" | grep -i "strict-transport-security" || echo "Missing HSTS"
        curl -I "$STAGING_URL" | grep -i "content-security-policy" || echo "Missing CSP"

  # OWASP ZAP Scan
  zap-scan:
    name: OWASP ZAP Security Scan
    runs-on: ubuntu-latest
    needs: deploy-staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'https://staging-api.universaldata.local'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: Upload ZAP results
      uses: actions/upload-artifact@v3
      with:
        name: zap-results
        path: 'zap-results.html'

  # Security Report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, sast, infrastructure-scan, license-scan, secret-scan, security-headers, zap-scan]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate security report
      run: |
        echo "# Security Scan Report" > security-report.md
        echo "Generated on: $(date)" >> security-report.md
        echo "" >> security-report.md
        
        echo "## Scan Results" >> security-report.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
        echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-report.md
        echo "- SAST: ${{ needs.sast.result }}" >> security-report.md
        echo "- Infrastructure Scan: ${{ needs.infrastructure-scan.result }}" >> security-report.md
        echo "- License Scan: ${{ needs.license-scan.result }}" >> security-report.md
        echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-report.md
        echo "- Security Headers: ${{ needs.security-headers.result }}" >> security-report.md
        echo "- ZAP Scan: ${{ needs.zap-scan.result }}" >> security-report.md

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.md

    - name: Comment PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('security-report.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });