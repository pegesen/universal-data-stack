{{- if .Values.apiGateway.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "universal-data-stack.fullname" . }}-api-gateway
  labels:
    {{- include "universal-data-stack.labels" . | nindent 4 }}
    component: api-gateway
spec:
  replicas: {{ .Values.apiGateway.replicaCount }}
  selector:
    matchLabels:
      {{- include "universal-data-stack.selectorLabels" . | nindent 6 }}
      component: api-gateway
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
      labels:
        {{- include "universal-data-stack.selectorLabels" . | nindent 8 }}
        component: api-gateway
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "universal-data-stack.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: api-gateway
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.registry }}/{{ .Values.apiGateway.image.repository }}:{{ .Values.apiGateway.image.tag | default .Values.image.tag }}"
          imagePullPolicy: {{ .Values.apiGateway.image.pullPolicy | default .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          env:
            - name: NODE_ENV
              value: {{ .Values.env.NODE_ENV | quote }}
            - name: LOG_LEVEL
              value: {{ .Values.env.LOG_LEVEL | quote }}
            - name: PORT
              value: "3000"
            - name: CONSUL_URL
              value: {{ .Values.env.CONSUL_URL | quote }}
            - name: REDIS_URL
              value: {{ .Values.env.REDIS_URL | quote }}
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "universal-data-stack.fullname" . }}-secrets
                  key: jwt-secret
            - name: SESSION_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "universal-data-stack.fullname" . }}-secrets
                  key: session-secret
          envFrom:
            - configMapRef:
                name: {{ include "universal-data-stack.fullname" . }}-config
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          resources:
            {{- toYaml .Values.apiGateway.resources | nindent 12 }}
          volumeMounts:
            - name: config
              mountPath: /app/config
              readOnly: true
      volumes:
        - name: config
          configMap:
            name: {{ include "universal-data-stack.fullname" . }}-config
      {{- with .Values.apiGateway.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.apiGateway.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.apiGateway.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}